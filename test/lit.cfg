# vim:syntax=python

import os
import platform
import subprocess
import sys

import lit39 as lit


#
# Basic information about this test suite.
#
config.name = 'libpreopen'
config.suffixes = [ '.c' ]
config.excludes = [ 'Inputs' ]
config.test_format = lit.formats.ShTest()

#
# Useful environment variables.
#
extra_cflags = [ '-Wall', '-g' ]     # always build tests with debug symbols
libdirs = [ ]

if 'output_dir' in lit_config.params:
	config.test_exec_root = lit_config.params['output_dir']


#
# Find the 'test_support' module (which may not be in the current PYTHONPATH).
#
src_dir = os.getenv('LIBPREOPEN_SOURCE_DIR')
if not src_dir:
	if not 'source_dir' in lit_config.params:
		raise Exception, ('Unable to find LIBPREOPEN source directory.'
			+ ' Set LIBPREOPEN_SOURCE_DIR or pass'
                        + ' --param=source_dir=path/to/src to lit')

	src_dir = lit_config.params['source_dir']

sys.path.append(os.curdir)
if src_dir:
	sys.path.append(os.path.join(src_dir, 'test'))
	extra_cflags += [ '-I', os.path.join(src_dir, 'include') ]

try:
	import test_support as test

except ImportError, e:
	print("Unable to find 'test_support' module in:\n[")
	for p in sys.path:
		print("  %s" % p)
	print("]")
	sys.exit(1)


#
# Find LLVM tools (e.g. FileCheck).
#
llvm_obj_root = test.llvm_config['obj-root']
llvm_tools = os.path.join(llvm_obj_root, 'bin')


#
# Find libpreopen library.
#
build_dir = os.getenv('LIBPREOPEN_BUILD_DIR')
if not build_dir:
	if not 'build_dir' in lit_config.params:
		raise Exception, ('Unable to find LIBPREOPEN build directory;' +
			' set LIBPREOPEN_BUILD_DIR or pass --build_dir to lit')

	build_dir = lit_config.params['build_dir']

libdir = os.path.join(build_dir, 'lib')
lib = test.find_library(test.libname('libpreopen', loadable_module = True),
	[ libdir ])


#
# Set variables that we can access from lit RUN lines.
#
config.substitutions += [
	# Tools:
	('%cc', test.which([ 'cc', 'clang', 'clang39', 'clang38' ])),
	('%filecheck', test.which(
		[ 'FileCheck', 'FileCheck39', 'FileCheck38' ])),

	# The library:
	('%lib', lib),

	# Flags:
	('%cflags', test.cflags([ '%p/Inputs' ], extra = extra_cflags)),
	('%ldflags', test.ldflags([ libdir ], [ 'preopen' ])),
]



config.environment['LD_LIBRARY_PATH'] = libdir
config.environment['PATH'] = os.path.pathsep.join([
	llvm_tools,
	config.environment['PATH']
])
